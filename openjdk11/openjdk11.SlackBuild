#!/bin/sh -e
# Matthew Radcliffe latest revision 2020/08/11

# Sets initial variables.
CWD=$(pwd)
if [ "$TMP" = "" ]; then
      TMP=/tmp
fi

VERSION=${VERSION:-11.0.9+2}
REVISION=${REVISION:-3112657edde9}
BUILD=${BUILD:-2}
# TAG=${TAG:-SBo}
SRCNAME=${SRCNAME:-jdk11u}
APP=openjdk11
PKG=$TMP/package-$APP

# Automatically determine the architecture we're building on:
if [ -z "$ARCH" ]; then
 case "$( uname -m )" in
   i?86) ARCH=i486 ;;
   arm*) ARCH=arm ;;
   # Unless $ARCH is already set, use uname -m for all other archs:
      *) ARCH=$( uname -m ) ;;
 esac
fi

if [ "$ARCH" = "i486" ]; then
  SLKCFLAGS="-O2 -march=i486 -mtune=i686"
  LIBDIRSUFFIX=""
elif [ "$ARCH" = "i686" ]; then
  SLKCFLAGS="-O2 -march=i686 -mtune=i686"
  LIBDIRSUFFIX=""
elif [ "$ARCH" = "x86_64" ]; then
  SLKCFLAGS="-O2 -fPIC"
  LIBDIRSUFFIX="64"
else
  SLKCFLAGS="-O2"
  LIBDIRSUFFIX=""
fi

rm -rf $PKG
mkdir -p $TMP $PKG
rm -rf $TMP/$SRCNAME-$REVISION

cd $TMP || $exit 1
tar -xvf $CWD/$SRCNAME-$VERSION.tar.bz2 || exit 1

cd $SRCNAME-$REVISION || exit 1
chown -R root:root .
chmod -R u+w,go+r-w,a-s .

# Recommended by OpenJDK developers.
unset JAVA_HOME

bash configure \
	--enable-unlimited-crypto \
	--with-extra-cflags="$SLKCFLAGS -fcommon" \
	--disable-warnings-as-errors \
	--with-stdc++lib=dynamic \
	--with-giflib=system \
	--with-lcms=system \
	--with-libjpeg=system \
	--with-libpng=system \
	--with-zlib=system \
	--with-version-build="${BUILD}" \
	--with-version-pre="" \
	--with-version-opt="" \
	--with-cacerts-file="$CWD/cacerts"

make images

# Now let's install it.
install -vdm755 $PKG/opt/$APP
cp -Rv build/*/images/jdk/* $PKG/opt/$APP

# Copies hicolor icons.
for s in 16 24 32 48; do
  install -vDm644 src/java.desktop/unix/classes/sun/awt/X11/java-icon${s}.png \
    $PKG/usr/share/icons/hicolor/${s}x${s}/apps/java.png
done

# Creates .desktop file
mkdir -pv $PKG/usr/share/applications
cat << EOF > $PKG/usr/share/applications/openjdk11.desktop
[Desktop Entry]
Name=OpenJDK Java ${VERSION} Runtime
Comment=OpenJDK Java ${VERSION} Runtime
Exec=/opt/openjdk/bin/java -jar
Terminal=false
Type=Application
Icon=java
MimeType=application/x-java-archive;application/java-archive;application/x-jar
NoDisplay=true
EOF

# Copies docs.
mkdir -p $PKG/usr/doc/$APP-$VERSION
cp -a ADDITIONAL_LICENSE_INFO ASSEMBLY_EXCEPTION LICENSE README $PKG/usr/doc/$APP-$VERSION
cat $CWD/$APP.SlackBuild > $PKG/usr/doc/$APP-$VERSION/$APP.SlackBuild

# Do some shitty cacerts stuff that is not explained anywhere because.
# This cacerts file comes from zulu-openjdk-lts on slackbuilds.org.
mkdir -p $PKG/etc/pki/tls/java
install -vDm644 $CWD/cacerts $PKG/etc/pki/tls/java/cacerts.new

cd $PKG/opt/$APP/lib/security
ln -sfv $PKG/etc/pki/tls/java/cacerts
cd $PKG

mkdir -p $PKG/etc/profile.d
install -vDm755 $CWD/profile.d/openjdk11.sh $PKG/etc/profile.d/openjdk11.sh.new
install -vDm755 $CWD/profile.d/openjdk11.csh $PKG/etc/profile.d/openjdk11.csh.new

# Strip some libraries and binaries
( cd $PKG
   find . | xargs file | grep "executable" | grep ELF | cut -f 1 -d : | xargs strip --strip-unneeded 2> /dev/null
   find . | xargs file | grep "shared object" | grep ELF | cut -f 1 -d : | xargs strip --strip-unneeded 2> /dev/null
)

# Compresses man pages if they exist
if [ -d $PKG/opt/$APP/usr/man ]; then
  ( cd $PKG/opt/$APP/usr/man
    find . -type f -exec gzip -9 {} \;
     for i in $(find . -type l) ; do ln -s $(readlink $i).gz $i.gz ; rm $i ; done
  )
fi

mkdir -p $PKG/install
cat $CWD/slack-desc > $PKG/install/slack-desc
cat $CWD/doinst.sh > $PKG/install/doinst.sh

# Builds the package.
cd $PKG
/sbin/makepkg -l y -c n $TMP/$APP-$VERSION-$ARCH-$BUILD.txz

