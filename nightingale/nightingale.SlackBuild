#!/bin/sh -e
# Matthew Radcliffe latest revision 2020/08/13
# Status: Horribly broken

CWD=$(pwd)
if [ "$TMP" = "" ]; then
  TMP=/tmp
fi


VERSION=${VERSION:-7a4e3d2d}
BUILD=${BUILD:-1}
APP=nightingale
SRCNAME=nightingale-hacking
PKG=$TMP/package-$APP

# Automatically determine the architecture we're building on:
if [ -z "$ARCH" ]; then
 case "$( uname -m )" in
   i?86) ARCH=i486 ;;
   arm*) ARCH=arm ;;
   # Unless $ARCH is already set, use uname -m for all other archs:
      *) ARCH=$( uname -m ) ;;
 esac
fi

if [ "$ARCH" = "i486" ]; then
  SLKCFLAGS="-O2 -march=i486 -mtune=i686"
  LIBDIRSUFFIX=""
elif [ "$ARCH" = "i686" ]; then
  SLKCFLAGS="-O2 -march=i686 -mtune=i686"
  LIBDIRSUFFIX=""
elif [ "$ARCH" = "x86_64" ]; then
  SLKCFLAGS="-O2 -fPIC"
  LIBDIRSUFFIX="64"
else
  SLKCFLAGS="-O2"
  LIBDIRSUFFIX=""
fi

rm -rf $PKG
mkdir -p $TMP $PKG
rm -rf $TMP/$SRCNAME-$APP-$VERSION

cd $TMP || exit 1

tar -vxf $CWD/$SRCNAME-$VERSION.tar.gz || exit 1
cd $SRCNAME-$VERSION || exit 1
chown -R root:root .
chmod -R u+w,go+r-w,a-s .

# Required patch from rsjtdrjgfuzkfg/nightingale-hacking
patch -p1 --verbose < $CWD/fix-building-on-gcc-6.patch

# Add configure options.
cat <<EOF > ./nightingale.config
# These don't actually work because.
ac_add_options --prefix=/usr
ac_add_options --libdir=/usr/lib$LIBDIRSUFFIX
ac_add_options --docdir=/usr/doc/$APP-$VERSION
ac_add_options --mandir=/usr/man
ac_add_options --with-media-core=gstreamer-system
ac_add_options --with-taglib-source=packaged
ac_add_options --enable-system-nspr
ac_add_options --enable-static
ac_add_options --disable-compiler-environment-checks
ac_add_options --disable-metrics
ac_add_options --build=$ARCH-slackware-linux
ac_add_options --host=$ARCH-slackware-linux
EOF

# Not sure if CFLAGS or CXXFLAGS does anything here.
CFLAGS="$SLKCFLAGS" CXXFLAGS="$SLKCFLAGS" \
    ./build.sh

# make install doesn't work because of hard-coded directories. :*(
# make install DESTDIR=$PKG/

# Copies docs.
mkdir -p $PKG/usr/doc/$APP-$VERSION
cp -a CONTRIBUTING.md LICENSE INSTALL TRADEMARK.txt $PKG/usr/doc/$APP-$VERSION/
cat $CWD/$APP.SlackBuild > $PKG/usr/doc/$APP-$VERSION/$APP.SlackBuild

mkdir -p $PKG/usr/bin
mkdir -p $PKG/usr/lib${LIBDIRSUFFIX}/nightingale

# Installs icons and desktop file
install -vDm644 app/branding/nightingale.svg \
	$PKG/usr/share/icons/hicolor/scalable/apps/nightingale.svg

for s in 16 24 32 48 64 96 128 256 512; do
	install -vDm644 app/branding/$APP-${s}.png \
		$PKG/usr/share/icons/hicolor/${s}x${s}/apps/nightingale.png
done

install -vDm644 $CWD/nightingale.desktop \
	$PKG/usr/share/applications/nightingale.desktop

# documentation build is broken
#install -vDm644 documentation/manpage/nightingale.1.gz \
#	$PKG/usr/man/man1/nightingale.1.gz

cp -R compiled/dist/* $PKG/usr/lib$LIBDIRSUFFIX/nightingale/
ln -sfv $PKG/usr/lib$LIBDIRSUFFIX/nightingale/nightingale $PKG/usr/bin/nightingale

# Compress info pages if they exist (and remove the dir file)
mkdir -p $PKG/usr/info
cat $CWD/$APP.info > $PKG/usr/info/$APP.info
if [ -d $PKG/usr/info ]; then
   gzip -9 $PKG/usr/info/*.info
   rm -f $PKG/usr/info/dir
fi

# Strip some libraries and binaries
( cd $PKG
   find . | xargs file | grep "executable" | grep ELF | cut -f 1 -d : | xargs strip --strip-unneeded 2> /dev/null
   find . | xargs file | grep "shared object" | grep ELF | cut -f 1 -d : | xargs strip --strip-unneeded 2> /dev/null
)

mkdir -p $PKG/install
cat $CWD/slack-desc > $PKG/install/slack-desc
cat $CWD/doinst.sh > $PKG/install/doinst.sh

cd $PKG
/sbin/makepkg -l y -c n $TMP/$APP-$VERSION-$ARCH-$BUILD.txz

